package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	"github.com/pradumnasaraf/Contributors/database"
	"github.com/pradumnasaraf/Contributors/graph/model"
)

// AddContributor is the resolver for the addContributor field.
func (r *mutationResolver) AddContributor(ctx context.Context, input model.NewContributor) (*model.Contributor, error) {
	newContributor := &model.Contributor{
		ID:             fmt.Sprint("U" + input.GithubUsername),
		Name:           input.Name,
		Email:          input.Email,
		GithubUsername: input.GithubUsername,
	}

	err := db.Add(newContributor)

	if err != nil {
		return nil, err
	}

	return newContributor, nil
}

// UpdateContributorByID is the resolver for the updateContributorById field.
func (r *mutationResolver) UpdateContributorByID(ctx context.Context, id string, input model.NewContributor) (*model.Contributor, error) {
	updateContributor := &model.Contributor{
		ID:             id,
		Name:           input.Name,
		Email:          input.Email,
		GithubUsername: input.GithubUsername,
	}

	err := db.UpdateByID(updateContributor)
	if err != nil {
		return nil, err
	}

	return updateContributor, nil
}

// DeleteContributor is the resolver for the deleteContributor field.
func (r *mutationResolver) DeleteContributor(ctx context.Context, id string) (*model.Contributor, error) {
	err := db.DeleteByID(id)
	if err != nil {
		return nil, err
	}
	return &model.Contributor{ID: id}, nil
}

// GetAllContributors is the resolver for the getAllContributors field.
func (r *queryResolver) GetAllContributors(ctx context.Context) ([]*model.Contributor, error) {
	contributors, err := db.GetAll()
	if err != nil {
		return nil, err
	}

	return contributors, nil
}

// GetAContributorByID is the resolver for the getAContributorById field.
func (r *queryResolver) GetAContributorByID(ctx context.Context, id string) (*model.Contributor, error) {
	contributor, err := db.GetByID(id)
	if err != nil {
		return nil, err
	}
	return contributor, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var db = database.NewMongoDB()
