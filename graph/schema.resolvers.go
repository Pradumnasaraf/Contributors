package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.50

import (
	"context"
	"fmt"

	"github.com/Pradumnasaraf/Contributors/graph/model"
	"github.com/Pradumnasaraf/Contributors/mongo"
)

var mongoClient *mongo.MongoDB

// GetMongoClient is a function that sets the MongoDB client.
func GetMongoClient(client *mongo.MongoDB) {
	mongoClient = client
}

// AddAContributor is the resolver for the addAContributor field.
func (r *mutationResolver) AddAContributor(ctx context.Context, input model.NewContributor) (*model.Contributor, error) {
	newContributor := &model.Contributor{
		UserID:         fmt.Sprint("U" + input.GithubUsername),
		Name:           input.Name,
		Email:          input.Email,
		GithubUsername: input.GithubUsername,
	}

	if input.Contributions != nil {
		newContributor.Contributions = []*model.Contribution{
			{
				ContributionID: fmt.Sprint("C" + input.Contributions.ProjectName),
				ProjectName:    input.Contributions.ProjectName,
				Type:           input.Contributions.Type,
				Date:           input.Contributions.Date,
			},
		}
	} else {
		newContributor.Contributions = []*model.Contribution{}
	}

	err := mongoClient.Add(newContributor)

	if err != nil {
		return nil, err
	}

	return newContributor, nil
}

// UpdateAContributor is the resolver for the updateAContributor field.
func (r *mutationResolver) UpdateAContributor(ctx context.Context, userID string, input model.UpdateContributor) (*model.Contributor, error) {
	updateContributor := &model.Contributor{
		UserID:         userID,
		Name:           input.Name,
		Email:          input.Email,
		GithubUsername: input.GithubUsername,
	}

	err := mongoClient.UpdateByID(updateContributor)
	if err != nil {
		return nil, err
	}

	return updateContributor, nil
}

// DeleteAContributor is the resolver for the deleteAContributor field.
func (r *mutationResolver) DeleteAContributor(ctx context.Context, userID string) (*model.Contributor, error) {
	err := mongoClient.DeleteByID(userID)
	if err != nil {
		return nil, err
	}
	return &model.Contributor{UserID: userID}, nil
}

// DeleteAContribution is the resolver for the deleteAContribution field.
func (r *mutationResolver) DeleteAContribution(ctx context.Context, userID string, contributionID string) (*model.Contribution, error) {
	err := mongoClient.DeleteContributionByID(userID, contributionID)
	if err != nil {
		return nil, err
	}
	return &model.Contribution{ContributionID: contributionID}, nil
}

// AddAContribution is the resolver for the addAContribution field.
func (r *mutationResolver) AddAContribution(ctx context.Context, userID string, input model.NewContribution) (*model.Contribution, error) {
	newContribution := &model.Contribution{
		ContributionID: fmt.Sprint("C" + input.ProjectName),
		ProjectName:    input.ProjectName,
		Type:           input.Type,
		Date:           input.Date,
	}

	err := mongoClient.AddContributionByID(userID, newContribution)
	if err != nil {
		return nil, err
	}

	return newContribution, nil
}

// GetAllContributors is the resolver for the getAllContributors field.
func (r *queryResolver) GetAllContributors(ctx context.Context) ([]*model.Contributor, error) {
	contributors, err := mongoClient.GetAll()
	if err != nil {
		return nil, err
	}

	return contributors, nil
}

// GetAContributor is the resolver for the getAContributor field.
func (r *queryResolver) GetAContributor(ctx context.Context, userID string) (*model.Contributor, error) {
	contributor, err := mongoClient.GetByID(userID)
	if err != nil {
		return nil, err
	}
	return contributor, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
